# The chat component needs multiple pieces of data so we define more than one GraphQL query.
# They can be imported as separate variables using `import { QueryName } from 'document.graphql'`
# in your JS.

# A GraphQL component may use as many queries, mutations, or subscriptions as it needs. Each one
# will need to be brokered using the `GraphQLData` HOC to get the query data into a component prop.
# Alternatively if you must control the query lifecycle see the `withApollo` HOC from react-apollo.
# This HOC allows you to directly get an instance of the Apollo GraphQL client to do specific operations.

# We need Sitecore content from the datasource item
query Datasource($datasource: String!) {
  datasource(value: $datasource) {
    ...on Chat {
      title {
        jss
      }
    }
  }
}

# We need a way to send a new chat message via GraphQL Mutation
mutation SendMessage($user: String! $message: String!) {
  chat(user: $user message: $message) {
    user
    message
  }
}

# We need a way to subscribe to new chat messages being sent
# via a GraphQL Subscription
subscription ChatSubscription {
  chat {
    user
    message
  }
}